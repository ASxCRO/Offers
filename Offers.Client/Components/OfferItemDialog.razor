@inherits ComponentBase
@inject HttpClient Http
@inject ISnackbar Snackbar

<EditForm Model="OfferItem" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    
    <MudDialog>
        <DialogContent>
            <MudSelect @bind-Value="OfferItem.ArticleName" Label="Select Article" Required Variant="Variant.Outlined">
                @foreach (var state in _states)
                {
                    <MudSelectItem Value="state">@state</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Variant="Variant.Outlined" @bind-Value="OfferItem.UnitPrice" Label="Unit Price" Type="Number" Required />
            <ValidationMessage For="@(() => OfferItem.UnitPrice)" />

            <MudTextField Variant="Variant.Outlined" @bind-Value="OfferItem.Quantity" Label="Quantity" Type="Number" Required />
            <ValidationMessage For="@(() => OfferItem.Quantity)" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private string[] _states =
    {
        "Alabama", "Alaska", "Arizona", "Arkansas", "California",
        "Colorado", "Connecticut", "Delaware", "Florida", "Georgia",
        "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas",
        "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts",
        "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana",
        "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico",
        "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma",
        "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota",
        "Tennessee", "Texas", "Utah", "Vermont", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming"
    };

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter] public OfferItemDto OfferItem { get; set; } = new();
    [Parameter] public bool IsEditMode { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        HttpResponseMessage response;
        if (IsEditMode)
        {
            response = await Http.PutAsJsonAsync($"/offeritems", OfferItem);
        }
        else
        {
            response = await Http.PostAsJsonAsync("/offeritems", OfferItem);
        }

        try
        {
            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add("Success", MudBlazor.Severity.Success);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotAcceptable || response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var validationMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(validationMessage, MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("Failed to create/update the offer item. Please try again.", MudBlazor.Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add("An error occurred while trying to reach the server. Please check your connection.", MudBlazor.Severity.Error);
        }
    }
}
