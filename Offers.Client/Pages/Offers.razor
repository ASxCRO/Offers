@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudGrid Class="p-3">
    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OpenCreateDialog">Add Offer</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudTable Items="@offers" Striped="true" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Offer ID</MudTh>
                <MudTh>Offer Date</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Offer ID">@context.OfferId</MudTd>
                <MudTd DataLabel="Offer Date">@context.OfferDate?.ToString("dd.MM.yyyy")</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Color="Color.Info" @onclick="@(() => OpenEditDialog(@context))">Edit</MudButton>
                    <MudButton Color="Color.Error" @onclick="@(() => DeleteOffer(@context.OfferId))">Delete</MudButton>
                    <MudButton Color="Color.Info" OnClick="@(() => ViewOfferItems(@context.OfferId))">Items</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    private List<OfferDto> offers = new();
    private OfferDto _newOffer = new();
    private OfferDto _selectedOffer;

    protected override async Task OnInitializedAsync()
    {
        await LoadOffers();
    }

    private async Task LoadOffers()
    {
        var response = await Http.GetFromJsonAsync<GetOffersResponse>("/offers");
        offers = response?.Offers ?? new();
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters { { "Offer", new OfferDto() } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullScreen = true };
        var dialog = DialogService.Show<OfferDialog>("Create Offer", parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadOffers();
        }
    }

    private async Task OpenEditDialog(OfferDto offer)
    {
        var parameters = new DialogParameters { { "Offer", offer } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullScreen = true };
        var dialog = DialogService.Show<OfferDialog>("Edit Offer", parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadOffers();
        }
    }

    private async Task DeleteOffer(int offerId)
    {
        var response = await Http.DeleteAsync($"/offers/{offerId}");
        if (response.IsSuccessStatusCode)
        {
            await LoadOffers();
        }
    }

    private void ViewOfferItems(int offerId)
    {
        NavigationManager.NavigateTo($"/offers/{offerId}/items");
    }
}
