@page "/offers/{OfferId:int}/items"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h3">Offer number @OfferId</MudText>
<br />
<MudGrid>
    <MudItem xs="12">
        <MudButton Color="Color.Primary" OnClick="OpenCreateDialog">Add Offer Item</MudButton>
        <MudTable Items="@offerItems" Striped="true" Hover="true" Bordered="true" ItemSize="5"
                  @bind-CurrentPage="@currentPage" PageSize="@pageSize" TotalItems="@totalOfferItems">
            <HeaderContent>
                <MudTh>Item ID</MudTh>
                <MudTh>Article Name</MudTh>
                <MudTh>Unit Price</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Total Price</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.ItemId</MudTd>
                <MudTd>@context.ArticleName</MudTd>
                <MudTd>@context.UnitPrice.ToString("C")</MudTd>
                <MudTd>@context.Quantity</MudTd>
                <MudTd>@context.TotalPrice.ToString("C")</MudTd>
                <MudTd>
                    <MudButton Color="Color.Primary" OnClick="@(() => OpenEditDialog(@context))">Edit</MudButton>
                    <MudButton Color="Color.Secondary" OnClick="@(() => DeleteOfferItem(@context.ItemId))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>

<MudPagination @bind-Page="currentPage" Count="totalPages" SelectedChanged="OnPageChanged" />

<MudText Typo="Typo.h6">Total price @totalPrice.ToString("c")</MudText>

    @code {
    [Parameter] public int OfferId { get; set; }

    private List<OfferItemDto> offerItems = new();
    private int currentPage = 1;
    private const int pageSize = 3;
    private int totalOfferItems;
    private int totalPages;
    private decimal totalPrice;

    protected override async Task OnInitializedAsync()
    {
        await LoadOfferItems();
    }

    private async Task LoadOfferItems()
    {
        try
        {
            var response = await Http.GetAsync($"/offers/{OfferId}/items?pageNumber={currentPage}&pageSize={pageSize}");
            if (response.IsSuccessStatusCode)
            {
                var offerItemsResponse = await response.Content.ReadFromJsonAsync<GetOfferItemsResponse>();
                offerItems = offerItemsResponse.OfferItems;
                totalOfferItems = offerItemsResponse.TotalCount;
                totalPages = (int)Math.Ceiling((double)totalOfferItems / pageSize);
                totalPrice = offerItemsResponse.TotalPrice;
            }
            else
            {
                Snackbar.Add("Failed to fetch offer items. Please try again.", MudBlazor.Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error fetching offer items: {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadOfferItems();
    }

    private async Task OpenCreateDialog()
    {
        var offerItem = new OfferItemDto();
        offerItem.OfferId = OfferId;
        var parameters = new DialogParameters { { "OfferItem", offerItem}, { "IsEditMode", false } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium};
        var dialog = DialogService.Show<OfferItemDialog>("Add Offer Item", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await CreateOfferItem(offerItem);
        }
    }

    private async Task OpenEditDialog(OfferItemDto item)
    {
        item.OfferId = OfferId;
        var parameters = new DialogParameters { { "OfferItem", item }, { "IsEditMode", true } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium};
        var dialog = DialogService.Show<OfferItemDialog>("Edit Offer Item", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await UpdateOfferItem(item);
        }
    }

    private async Task CreateOfferItem(OfferItemDto newItem)
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"/offeritems", newItem);
            if (response.IsSuccessStatusCode)
            {
                await LoadOfferItems();
            }
            else if(response.StatusCode == System.Net.HttpStatusCode.NotAcceptable)
            {
                var validationMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(validationMessage, MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("Failed to create offer item. Please try again.", MudBlazor.Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add("An error occurred while trying to reach the server. Please check your connection.", MudBlazor.Severity.Error);
        }
    }

    private async Task UpdateOfferItem(OfferItemDto updatedItem)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"/offeritems", updatedItem);
            if (response.IsSuccessStatusCode)
            {
                await LoadOfferItems();
                Snackbar.Add("Success", MudBlazor.Severity.Success);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotAcceptable)
            {
                var validationMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(validationMessage, MudBlazor.Severity.Error);
            }
            else
            {
                Snackbar.Add("Failed to update offer item. Please try again.", MudBlazor.Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add("An error occurred while trying to reach the server. Please check your connection.", MudBlazor.Severity.Error);
        }
    }

    private async Task DeleteOfferItem(int itemId)
    {
        try
        {
            var response = await Http.DeleteAsync($"/offeritems/{itemId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadOfferItems();
                Snackbar.Add("Success", MudBlazor.Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to delete offer item. Please try again.", MudBlazor.Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add("An error occurred while trying to reach the server. Please check your connection.", MudBlazor.Severity.Error);
        }
    }
}
